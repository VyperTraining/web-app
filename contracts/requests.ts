/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ContractMethodNames,
  Params,
} from '@usedapp/core/dist/esm/src/model/types'

import getContract from './getContract'
import { ToDo, Token } from './typechain'

// Contract: ToDo
export type ToDoMethodNames = ContractMethodNames<ToDo>
export type ToDoParams = Params<ToDo, ToDoMethodNames>

export type ToDoRequest = {
  contract: (network?: number) => ToDo
  method: ToDoMethodNames
  args: ToDoParams
  returnType?: Awaited<ReturnType<ToDo['functions'][ToDoMethodNames]>>[0]
}

export function ToDoCall<M extends ToDoMethodNames>(
  method: M,
  args: Parameters<ToDo['functions'][M]>,
) {
  return {
    contract: (network?: number) => getContract('ToDo', network),
    method,
    args,
    returnType: undefined as
      | Awaited<ReturnType<ToDo['functions'][M]>>[0]
      | undefined,
  }
}

// Contract: Token
export type TokenMethodNames = ContractMethodNames<Token>
export type TokenParams = Params<Token, TokenMethodNames>

export type TokenRequest = {
  contract: (network?: number) => Token
  method: TokenMethodNames
  args: TokenParams
  returnType?: Awaited<ReturnType<Token['functions'][TokenMethodNames]>>[0]
}

export function TokenCall<M extends TokenMethodNames>(
  method: M,
  args: Parameters<Token['functions'][M]>,
) {
  return {
    contract: (network?: number) => getContract('Token', network),
    method,
    args,
    returnType: undefined as
      | Awaited<ReturnType<Token['functions'][M]>>[0]
      | undefined,
  }
}

// All Requests
export type Requests = Record<string, ToDoRequest | TokenRequest >
