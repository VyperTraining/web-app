/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, utils } from 'ethers'

import {
 ToDo,
 Token,
 ToDo__factory,
 Token__factory
} from './typechain'

type Contracts = {
 ToDo: ToDo
 Token: Token
}

const INTERFACES = {
 ToDo: new utils.Interface(ToDo__factory.abi),
 Token: new utils.Interface(Token__factory.abi),
}

export const MANIFEST: {
  [K in keyof Contracts]: string | Record<number, string>
} = {
	"ToDo": {
		"3": "0x053E254863d00a6532e35af7221CdEcBB808ab29"
	},
	"Token": "0xd5a215CD386c00a14BdC1948342FbC9e19F1936C"
}

export function getAddress<C extends keyof Contracts>(
  contract: C,
  network = 0,
) {
  return (
    (typeof MANIFEST[contract] === 'string'
      ? (MANIFEST[contract] as string)
      : MANIFEST[contract][network]) || ''
  )
}

export default function getContract<C extends keyof Contracts>(
  contract: C,
  network?: number,
) {
  return new Contract(
    getAddress(contract, network),
    INTERFACES[contract],
  ) as Contracts[C]
}

