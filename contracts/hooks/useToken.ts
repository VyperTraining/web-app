/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
  
import { useMemo } from 'react'

import {
  CallResult,
  useCall,
  useContractFunction,
  useEthers,
} from '@usedapp/core'
import { ContractFunctionNames } from '@usedapp/core/dist/esm/src/model/types'

import getContract from '../getContract'
import { TokenMethodNames } from '../requests'
import { Token } from '../typechain'

export function useTokenCall<M extends TokenMethodNames>(
  method: M,
  args: Parameters<Token['functions'][M]>,
) {
  const { chainId } = useEthers()

  const contract = useMemo(() => getContract('Token', chainId), [chainId])

  const { value, error } = (useCall({
    contract,
    method,
    args,
  }) as CallResult<Token, M>) ?? {
    value: undefined,
    error: undefined,
  }

  return [value?.[0], error, !value] as [
    Awaited<ReturnType<Token['functions'][M]>>[0] | undefined,
    Error | undefined,
    boolean,
  ]
}

type TokenFunctions = ContractFunctionNames<Token>
export function useTokenFunction(name: TokenFunctions, transactionName?: string) {
  const { chainId } = useEthers()

  const contract = useMemo(() => getContract('Token', chainId), [chainId])

  const transaction = useContractFunction(contract, name, {
    transactionName: transactionName || name,
  })
  return transaction
}
